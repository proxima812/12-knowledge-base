---
import TableOfContents from "@components/_toc/TableOfContents.astro";
import PageWrapper from "@components/partials/PageWrapper.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import { getPosts } from "@utils/post";
import { getCollection } from "astro:content";

import Socials from "@components/Socials.astro";

export const prerender = true;
const posts = await getCollection("blog");

export async function getStaticPaths() {
  const posts = await getPosts();
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

const post = Astro.props;

const getRelatedPosts = (post) => {
  const relatedPosts = posts.filter(
    (p) =>
      p.slug !== post.slug &&
      p.data.tags.some((t) => post.data.tags.includes(t)),
  );
  return relatedPosts.slice(0, 3);
};

const relatedPosts = getRelatedPosts(post);
const { Content, headings } = await post.render();
---

<BaseLayout
  title={post.data.title}
  description={post.data.description}
  ogImage={post.data.ogImage}
  articleDate
  max_w="max-w-6xl"
>
  <PageWrapper gap="8">
    <div
      class="absolute -z-10 top-[75px] inset-0 bg-gradient-to-b from-gray-200/60 to-white/10 h-96"
    >
    </div>
    <!-- {
      post.data.image && (
        <Image
          class="rounded-md cover"
          width={1200}
          height={360}
          src={post.data.image}
          alt={"Изображнение к посту: " + post.data.title}
          format={"avif"}
          quality={"mid"}
        />
      )
    } -->

    <div class="flex items-center justify-between gap-5 flex-wrap">
      <a href="/" class="px-3 py-2 rounded-lg bg-white font-medium">Вернуться</a
      >
      <Socials />
    </div>

    <div>
      <h1 class="text-4xl font-bold">{post.data.title}</h1>
      <p class="mt-3 text-gray-400">{post.data.description}</p>
    </div>

    <main class="flex items-start gap-12">
      <div class="prose md:prose-md lg:prose-lg max-w-none">
        <Content />
      </div>
      <aside class="sticky top-5 shrink-0 max-w-[290px]">
        {headings && headings.length > 0 && <TableOfContents {headings} />}
      </aside>
    </main>
  </PageWrapper>

  <!-- components={{ pre: Code }} ----  <Content /> -->
  <!-- {
    relatedPosts && (
      <div class="mt-12">
        <h4 class="my-6 text-xl font-bold">Похожие посты</h4>
        <ListRelatedPosts posts={relatedPosts} />
      </div>
    )
  }
  <PrevNext /> -->

  <script>
    function handleIntersection(
      entries: IntersectionObserverEntry[],
      observer: IntersectionObserver,
    ) {
      entries.forEach((entry) => {
        const index = document.querySelector(
          `ul a[href="#${entry.target.id}"]`,
        );

        if (entry.isIntersecting) {
          index?.classList.remove("bg-blue-400/10", "text-blue-400"); // remove bg
          index?.classList.add(
            "bg-blue-500",
            "text-white",
            "transition-colors",
            "duration-200",
          );
        } else {
          index?.classList.add("bg-blue-400/10", "text-blue-400"); // add bg
          index?.classList.remove(
            "bg-blue-500",
            "text-white",
            "transition-colors",
          );
        }
      });
    }

    const headings = document.querySelectorAll(
      "div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6",
    );

    const options = {
      root: null,
      rootMargin: " 15% 0px 0% 0px ",
      threshold: 1,
    };

    const observer = new IntersectionObserver(handleIntersection, options);

    headings.forEach((heading) => {
      observer.observe(heading);
    });
  </script>
</BaseLayout>
